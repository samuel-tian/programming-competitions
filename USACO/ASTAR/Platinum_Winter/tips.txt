for basic graph traversal algorithms:
    if finding a minimum or a maximum, try binary searching on the answer
for recursion on a relatively small data set:
    brute force when N~20, running time is 2^N
    meet in the middle for N~40: split up into two subcases and attempt to merge them together, running time is N 2^(N/2)
merging abstract data structures:
    if it is difficult to maintain a dynamic data structure, then maintain logN data structures and merge along the way. Data structures are maintained by considering 2^k points
    MO's algorithm - sqrt decomposition (?)
trees:
    subtree query:
        do a pre-order traversal (aka dfs) so that every node and its children are part of a contiguous segment euler tour trees - subtree queries and splicing off subtrees and relinking
    heavy-light decomposition:
        mark an edge as heavy if the subtree contains more than half the vertices if the subtree corresponding to that edge has more than half of the parent's children
        use a pre-order traversal with bias towards heavy edges so that heavy chains are contiguous
        least common ancestor - skip the entire heavy chain when traversing backwards
		standard lca algorithm with a BIT can replace heavy-light in most cases
    link-cut trees
	Fenwick Tree (Binary Index Tree)
	segment trees and lazy propagation
graphs:
    dijkstra's shortest path but edge weights must be positive, O(VlogV) running time
    Bellman Ford (SPFA is an optimization) and edge weights can be positive and negative, O(VE) running time
	Floyd Warshall algorithm - all pairs shortest path
bitsets for fast binary operations
disjoint set union (DSU)
inversion counting:
	insert the nodes one-by-one into a binary index tree and count the number of elements in that BIT that are greater than the node index
recursion with pruning:
	fail fast - start recursion at the states that are most likely to break the solution
sqrt decomposition:
	split the problem up into sqrt(N) parts and do up to sqrt(N) operations instead of O(N)
	eg. sum range queries: split it up into sqrt(N) segments and keep track of the sums for each of the sqrt(N) segments
