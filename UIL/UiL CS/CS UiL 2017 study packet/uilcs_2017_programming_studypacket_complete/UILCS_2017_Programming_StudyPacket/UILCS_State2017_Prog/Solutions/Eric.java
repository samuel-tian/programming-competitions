/*
UIL 2017
State - Eric

Number patterns have always fascinated Eric, and the latest pattern consists of the following process.
He starts with two single digits in the range 0 through 9. The two digits can be the same value, or different values.

For example, he'll start with the values 2 and 6, and then will generate a third number that is the sum of the previous two, 
but if it exceeds 9, he only keeps the ones digit of that sum.  In this case, the sum of 2 and 6 is 8, which is the third number in the series.
The next number is generated by taking the last two values, which are now 6 and 8, whose sum is 14, which exceeds 9,
so he keeps only the 4. The next value is the sum of 8 and 4, which is 12, and so the 2 is the next value in the series. 
Next comes the sum of 4 and 2, which is 6. When the series matches the start, he stops and counts how many values were in the final series,
which in this example would be 6: 2, 6, 8, 4, 2, and 6.

He realizes there probably isn't much use for this pattern, but finds it an interesting pattern exercise, just the same.

Input: Several pairs of single digit values in the range 0-9, with single space separation. A pair can be matching values.

Output: For each pair, output the number of values that result in the series at the point that the beginning pair of value is matched by the last pair of values.

Sample Input:
2 6
1 3
5 5

Sample Output:
6
14
5

*/
import java.util.*;
import java.util.regex.Pattern;
import java.io.*;
import static java.lang.System.*;

class Eric
{
	public static void main(String [] args) throws IOException
	{
		Scanner f = new Scanner(new File("eric.dat"));
		Scanner kb = new Scanner(System.in);
		while(f.hasNext())
		{
			int a=f.nextInt(),b=f.nextInt();
			int A=a,B=b,C;
			int count = 2;
			do{
				C=(A+B)%10;
				A=B;
				B=C;
				count++;
			}while(A!=a || B!=b);
			out.println(count);
		}
		f.close();
	}
}
/*

*/