Kovanice
[Memory: 256 MB, CPU: 2 sec]
Mirko paid a touristic visit to a land far away where banknotes aren’t used, but only coins. More precisely, the country has N types of coins in circulation. Their names are, respectively, ‘K1’, ‘K2’, ‘K3’, . . . , ‘KN’. The coins are of the same size and shape, but different weights. ‘K1’ is the lightest type of coin, ‘K2’ is the second lightest and so on until the heaviest type ‘KN’.

Mirko has M coins in his pocket, but he doesn’t know which one is of which type. In order to determine that, he only has a simple balance scale at his disposal.

Initially, Mirko marked his unknown coins with numbers from 1 to M and after that performed V weighings. In each weighing, he put one coin on one side of the scale, and another coin on the other side of the scale. Then he saw whether the two coins weigh equally, and if they don’t, which one is heavier.

Write a programme that will, based on the weighing results, determine the type of coin for each coin for which it is possible to determine it uniquely.

INPUT
The first line of input contains integers N, M and V – the number of types of coins in the country, the number of coins in Mirko’s pocket and the number of weighings.

Each of the following V lines contains the result of one weighing in the form of ACB where A and B are different integers less than or equal to M, and C is the character ‘=’ (equal) or ‘<’ (less).

There is no space between the numbers and character C. The result of one weighing tells us that Mirko’s coin marked with A is of equal weight as the coin marked with B or lighter than it.

The weighing results won’t be contradictory.

OUTPUT
Output M lines. The ith line must contain the type of coin marked with i – a sequence of characters of the form ‘KX’ where X is an integer between 1 and N.

If it isn’t possible to uniquely determine the weight of the coin marked with i, output the character ‘?’ in the ith line.

SCORING
percent of score
constraints
10	N = 2, 1 <= M <= 1000
40	N = 2, 1 <= M <= 300,000
10	1 <= M <= 1,000
40	1 <= M <= 300,000
In all subtasks, it will hold 2 <= N <= 300,000 and 1 <= V <= 300,000.

SAMPLE TESTS
input

3 5 3
1<2
2<4
3=5



output

K1
K2
?
K3
?
input

2 7 6
1=2
2=3
2=7
3<4
4=5
4=6
output

K1
K1
K1
K2
K2
K2
K1
